# Placeholder for unit testimport numpy as npimport pandas as pdimport src.data_gatheringdef test_load_feature_matrix_from_file():    filepath = "../data/assignment_1.csv"    # Load the original CSV to determine number of valid rows    df = pd.read_csv(filepath, na_values="-")    # Try to parse datetime â€” rows with invalid datetime will become NaT    df["datetime"] = pd.to_datetime(        df[["Year", "Month", "Day"]].astype(str).agg("-".join, axis=1) + " " + df["Time [Local time]"],        errors="coerce"    )    # Count rows with valid datetime    expected_rows = df["datetime"].notna().sum()    # Call the function    feature_array = load_feature_matrix(filepath)    # Check shape    assert feature_array.shape[1] == 7, "Feature matrix must have 7 columns"    assert feature_array.shape[0] == expected_rows, f"Expected {expected_rows} rows, got {feature_array.shape[0]}"    # Check ranges    assert (feature_array[:, 1] >= 1).all() and (feature_array[:, 1] <= 12).all(), "Invalid month values"    assert (feature_array[:, 5] >= -100).all(), "Min temperature out of bounds"    assert (feature_array[:, 6] <= 100).all(), "Max temperature out of bounds"    # Ensure no NaNs remain    assert not np.isnan(feature_array).any(), "No NaNs should remain"    print("Test passed: load_feature_matrix returns correct shape and values")