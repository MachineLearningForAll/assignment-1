# Placeholder for unit testimport numpy as npimport pandas as pdimport osimport sysfrom src.data_gathering import load_feature_matrixdef test_load_feature_matrix_from_file():    # Get absolute path to data/assignment_1.csv    base_dir = os.path.dirname(__file__)    filepath = os.path.abspath(os.path.join(base_dir, "../data/assignment_1.csv"))    # Load raw data to count valid rows    df = pd.read_csv(filepath, na_values="-")    df["datetime"] = pd.to_datetime(        df[["Year", "Month", "Day"]].astype(str).agg("-".join, axis=1) + " " + df["Time [Local time]"],        errors="coerce"    )    expected_rows = df["datetime"].notna().sum()    # Call student's function    feature_array = load_feature_matrix(filepath)    # Assertions    assert feature_array.shape[1] == 7, "Expected 7 columns"    assert feature_array.shape[0] == expected_rows, f"Expected {expected_rows} rows"    assert not np.isnan(feature_array).any(), "Feature matrix contains NaNs"